/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as PostsPostIdIndexImport } from './routes/posts/$postId/index'
import { Route as AuthTestSingupIndexImport } from './routes/authTest/singup/index'
import { Route as PostsPostIdEditImport } from './routes/posts/$postId/edit'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdIndexRoute = PostsPostIdIndexImport.update({
  id: '/posts/$postId/',
  path: '/posts/$postId/',
  getParentRoute: () => rootRoute,
} as any)

const AuthTestSingupIndexRoute = AuthTestSingupIndexImport.update({
  id: '/authTest/singup/',
  path: '/authTest/singup/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdEditRoute = PostsPostIdEditImport.update({
  id: '/posts/$postId/edit',
  path: '/posts/$postId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/posts/$postId/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditImport
      parentRoute: typeof rootRoute
    }
    '/authTest/singup/': {
      id: '/authTest/singup/'
      path: '/authTest/singup'
      fullPath: '/authTest/singup'
      preLoaderRoute: typeof AuthTestSingupIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/authTest/singup': typeof AuthTestSingupIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/authTest/singup': typeof AuthTestSingupIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/authTest/singup/': typeof AuthTestSingupIndexRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/posts'
    | '/posts/$postId/edit'
    | '/authTest/singup'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/posts'
    | '/posts/$postId/edit'
    | '/authTest/singup'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/posts/'
    | '/posts/$postId/edit'
    | '/authTest/singup/'
    | '/posts/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
  AuthTestSingupIndexRoute: typeof AuthTestSingupIndexRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsPostIdEditRoute: PostsPostIdEditRoute,
  AuthTestSingupIndexRoute: AuthTestSingupIndexRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/posts/",
        "/posts/$postId/edit",
        "/authTest/singup/",
        "/posts/$postId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/posts/$postId/edit": {
      "filePath": "posts/$postId/edit.tsx"
    },
    "/authTest/singup/": {
      "filePath": "authTest/singup/index.tsx"
    },
    "/posts/$postId/": {
      "filePath": "posts/$postId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
